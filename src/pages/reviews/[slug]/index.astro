---
import { allReviews, getContentPlainText } from "~/api/reviews";
import AstroPageShell from "~/astro/AstroPageShell.astro";
import { Layout } from "~/components/layout/Layout";
import { getReviewProps } from "~/features/review/getReviewProps";
import { Review } from "~/features/review/Review";
import { toSentenceArray } from "~/utils/toSentenceArray";

interface Props {
  contentPlainText: string;
  review: Awaited<ReturnType<typeof allReviews>>["reviews"][number];
}

export async function getStaticPaths() {
  const { reviews } = await allReviews();

  return await Promise.all(
    reviews.map(async (review) => {
      return {
        params: {
          slug: review.slug,
        },
        props: {
          contentPlainText: getContentPlainText(review.rawContent),
          review,
        },
      };
    }),
  );
}

const { contentPlainText, review } = Astro.props;

const reviewProps = await getReviewProps(review);

//trim the string to the maximum length
var description = contentPlainText
  .replaceAll(/\r?\n|\r/g, " ")
  .slice(0, Math.max(0, 160));

//re-trim if we are in the middle of a word
description = description.slice(
  0,
  Math.max(0, Math.min(description.length, description.lastIndexOf(" "))),
);

let title = `${review.title} by ${toSentenceArray(review.authors.map((author) => author.name)).join("")}`;

const kind = review.kind == "Short Story" ? "story" : "book";

title = `${title} ${kind} review`;
---

<AstroPageShell
  canonical={true}
  meta={{ description }}
  openGraph={{ description, type: "article" }}
  title={title}
>
  <Fragment slot="meta-theme-color">
    <meta
      content="#fff"
      media="(prefers-color-scheme: light)"
      name="theme-color"
    />
    <meta
      content="#322f2f"
      media="(prefers-color-scheme: dark)"
      name="theme-color"
    />
  </Fragment>
  <Layout>
    <Review {...reviewProps} />
  </Layout>
</AstroPageShell>
