---
import "./base.css";
import "@pagefind/default-ui/css/ui.css";

import { Layout as LayoutComponent } from "src/components/Layout";

interface Props {
  title: string;
  description: string;
  image?: string | null;
  article?: boolean;
}

const siteMeta = {
  author: "Frank Showalter",
  url: "https://www.franksbooklog.com/",
  image: "/assets/default_og.jpg",
  title: "Frank's Book Log",
};

const { title, description, image, article = false } = Astro.props;
let pageTitle;

if (title.startsWith(siteMeta.title)) {
  pageTitle = title;
} else {
  pageTitle = `${title} | ${siteMeta.title}`;
}

const ogImage = image || "https://www.franksbooklog.com/assets/default_og.jpg";

const pathname = new URL(Astro.request.url).pathname;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.ico" sizes="48x48" />
    <link rel="icon" href="/favicon.svg" sizes="any" type="image/svg+xml" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="description" content={description} />
    <meta name="og:image" content={ogImage} />
    <meta property="og:url" content={`${siteMeta.url}${pathname}`} />
    {article && <meta property="og:type" content="article" />}
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <title>{pageTitle}</title>
  </head>
  <body class="data-[search-modal-open]:blur-sm">
    <LayoutComponent currentPath={pathname}>
      <slot />
    </LayoutComponent>
    <dialog
      class="w-[calc(100%_-2_*_var(--gutter))] rounded-xl border-2 border-default shadow-xl tablet:max-w-[75vw]"
      aria-label="Search"
    >
      <div class="dialog-frame flex flex-col overflow-hidden px-gutter py-4">
        {
          (
            <div class="flex-grow">
              <div id="pagefind__search" />
            </div>
          )
        }
        <div class="pt-4 text-sm text-subtle">
          <kbd class="bg-subtle p-2 font-mono">Tab</kbd> to navigate
          <button
            data-close-modal
            class="ml-2 self-start bg-subtle p-2 font-mono text-xs text-subtle"
            ><kbd>ESC</kbd></button
          > to close
        </div>
      </div>
    </dialog>
  </body>
</html>

<script is:inline>
  (() => {
    const openBtn = document.querySelector("button[data-open-modal]");
    const shortcut = openBtn?.querySelector("kbd");
    if (!openBtn || !(shortcut instanceof HTMLElement)) return;
    const platformKey = shortcut.querySelector("kbd");
    if (platformKey && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform)) {
      platformKey.textContent = "⌘";
      openBtn.setAttribute("aria-keyshortcuts", "Meta+K");
    }
    shortcut.style.display = "";
  })();
</script>

<script>
  const openBtn = document.querySelector<HTMLButtonElement>(
    "button[data-open-modal]",
  )!;
  const closeBtn = document.querySelector<HTMLButtonElement>(
    "button[data-close-modal]",
  )!;
  const dialog = document.querySelector("dialog")!;
  const dialogFrame = document.querySelector(".dialog-frame")!;

  /** Close the modal if a user clicks on a link or outside of the modal. */
  const onClick = (event: MouseEvent) => {
    const isLink = "href" in (event.target || {});
    if (
      isLink ||
      (document.body.contains(event.target as Node) &&
        !dialogFrame.contains(event.target as Node))
    ) {
      closeModal();
    }
  };

  const openModal = (event?: MouseEvent) => {
    dialog.showModal();
    document.body.toggleAttribute("data-search-modal-open", true);
    document.querySelector("input")?.focus();
    event?.stopPropagation();
    window.addEventListener("click", onClick);
  };

  const closeModal = () => dialog.close();

  openBtn.addEventListener("click", openModal);
  openBtn.disabled = false;
  closeBtn.addEventListener("click", closeModal);

  dialog.addEventListener("close", () => {
    document.body.toggleAttribute("data-search-modal-open", false);
    window.removeEventListener("click", onClick);
  });

  // Listen for `ctrl + k` and `cmd + k` keyboard shortcuts.
  window.addEventListener("keydown", (e) => {
    if ((e.metaKey === true || e.ctrlKey === true) && e.key === "k") {
      dialog.open ? closeModal() : openModal();
      e.preventDefault();
    }
  });

  window.addEventListener("DOMContentLoaded", () => {
    const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
    onIdle(async () => {
      // @ts-expect-error — Missing types for @pagefind/default-ui package.
      const { PagefindUI } = await import("@pagefind/default-ui");
      new PagefindUI({
        element: "#pagefind__search",
        baseUrl: import.meta.env.BASE_URL,
        bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
        showImages: true,
        showSubResults: false,
      });
    });
  });
</script>

<style is:global>
  #pagefind__search {
    --pagefind-ui-scale: 0.76190476;
    --pagefind-ui-primary: var(--fg-accent);
    --pagefind-ui-text: var(--fg-default);
    --pagefind-ui-background: var(--bg-default);
    --pagefind-ui-border: var(--border-default);
    --pagefind-ui-tag: #eeeeee;
    --pagefind-ui-border-width: 2px;
    --pagefind-ui-border-radius: 8px;
    --pagefind-ui-image-border-radius: 8px;
    --pagefind-ui-image-box-ratio: 3 / 2;
    --pagefind-ui-font: "Charter", "Iowan Old Style", "Georgia", "Cambria",
      "Times New Roman", "Times", "serif";
  }

  #pagefind__search input:focus {
    outline: 1px solid var(--fg-accent);
    outline-offset: -2px;
  }
</style>
